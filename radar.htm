<!-- 
    Webpage for "historicly correct" radar graphics
        by Pim de Vroom
        code sources used:
            - https://www.tutorialspoint.com/webgl/
              For general code to run shader graphics
            - http://glslsandbox.com/e#41606.0
              code by Twareintor (2017) - copyright (c) 2017 Claudiu Ciutacu
              mailto: ciutacu /d] gmail * com
              For fragment shader graphics

-->

<!doctype html>
<html>
    <head>
        <meta charset="utf-8">
        <style>
        html, body {
        width: 100%;
        height: 100%;
        margin: 0px;
        border: 0;
        overflow: hidden; /*  Disable scrollbars */
        display: block;  /* No floating content on sides */
        }
        </style>
    </head>

    <body>
        <canvas id = "my_Canvas" ></canvas>
       
   
        <script>
            /*============= Creating a canvas =================*/
            var canvas = document.getElementById('my_Canvas');
            canvas.width = document.documentElement.clientWidth;
            canvas.height = document.documentElement.clientHeight;
            gl = canvas.getContext('experimental-webgl');
            
            /*============ Defining and storing the geometry =========*/
            var vertices = [
                -1,1,0.0,
                -1,-1,0.0,
                1,-1,0.0,
                1,1,0.0 
                ];
    
            indices = [3,2,1,3,1,0];
    
          
    
            // Create and store data into vertex buffer
            var vertex_buffer = gl.createBuffer ();
            gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
            // Create and store data into index buffer
            var index_buffer = gl.createBuffer ();
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, index_buffer);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);
            
            //Create and store contacts data in buffer
            //var contacts_buffer = gl.createBuffer();
            //gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, contacts_buffer);
            //gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Float32Array(contacts), gl.STATIC_DRAW);
            
            
            /*=================== Shaders =========================*/
    
            var vertCode = `
                attribute vec3 position;
        
                void main(void) { //pre-built function
                    gl_Position = vec4(position, 1.);
                }
                `;
    
            var fragCode = `
                #ifdef GL_ES
                precision mediump float;
                #endif
                
                #extension GL_OES_standard_derivatives : enable
                
                #define PI 3.14159265359            
                #define SPOT 7.
                #define OMEGA 0.42 	// 
                #define RADIUS 550. // 
                #define DECAY .975 // max.0.98
                #define GRIDON true // 
                //#define DIRECTION 1. // 1. (right) or -1. //No longer relevant since direction changes each 180 degree turn
                #define TRAVELSPEED 5.
                #define OBSTACLESIZE .24 // reasonable???
                            
                uniform float time;
                uniform vec2 mouse;
                uniform vec2 resolution;
                uniform float contactPositions[400];
                
                //layout(std140, binding = 2) uniform contactPositions { ... };
                
                float circleA(vec3 p0, float rad, float size)
                {
                    float q;
                    vec3 p = gl_FragCoord.xyz-p0;
                    q = clamp(size/2./abs((abs(length(gl_FragCoord.xyz-p0)-rad))), 0., 1.);
                    return q;
                }            
                float point(vec3 p0, float size)
                {
                    float q = clamp(1.-float(length(gl_FragCoord.xyz-p0)/size), 0., 1.);
                    return q;
                }            
                float line(vec3 p0, vec3 p1, float size)
                {
                    vec3 pos = p0+normalize(p1-p0)*length(gl_FragCoord.xyz-p0)*dot(normalize(p1-p0), normalize(gl_FragCoord.xyz-p0));
                    float q = clamp(1.-float(length(gl_FragCoord.xyz-pos)/size), 0., 1.); 
                    return q;
                }            
                float segment(vec3 p0, vec3 p1, float size, bool ends)
                {
                    float q = line(p0, p1, size);
                    // limit the line at its ends:
                    q*=float(0.0>=dot(normalize(gl_FragCoord.xyz-p0), normalize(gl_FragCoord.xyz-p1)));
                    if(ends) q = max(q, point(p0, size)); // adding points same size at ends
                    return q;
                }            
                float r(vec2 n) {
                    return fract(cos(dot(n,vec2(36.26,73.12)))*354.63);
                }            
                float noise(vec2 n) 
                {
                    vec2 fn = floor(n);
                    vec2 sn = smoothstep(0.,1.,fract(n));                
                    float h1 = mix(r(fn),           r(fn+vec2(1,0)), sn.x);
                    float h2 = mix(r(fn+vec2(0,1)), r(fn+1.)       , sn.x);
                    return mix(h1,h2,sn.y);
                }            
                float perlin(vec2 n) {  
                    return noise(n/32.)*0.5875+noise(n/16.)/5.+noise(n/8.)/10.+noise(n/4.)/20.+noise(n/2.)/40.+noise(n)/80.;
                }
                bool inrange(float a, float b, float wingspanBonus){
                    return abs(a - b) < wingspanBonus;
                }
                

                float contactOnLocation(vec2 n){
                    for(int i = 0; i < 400; i++){
                        if(contactPositions[4*i] == -1.) return 0.;
                        if(inrange(n.x, contactPositions[4 * i] * RADIUS/40., contactPositions[3 + 4 * i]) && inrange(n.y, contactPositions[1 + 4 * i] * RADIUS/40., contactPositions[3 + 4 * i])){// || n.x > contactPositions[1] * RADIUS/40.){
                            return 1.;
                        }
                    }
                }
                void main() 
                {
                    
                    float t = time;
                    vec2 cen = resolution.xy/2.0;
                    cen.y -= resolution.y /3.;
                    vec2 enem = cen+vec2(mouse.x, mouse.y)*RADIUS;
                    float r = .0;
                    float g = .0;
                    float b = .0;
                    vec2 f = gl_FragCoord.xy-cen;
                    
                    if(length(f)<RADIUS && gl_FragCoord.y > cen.y)
                    {
                        /** the trace is green... */
                        g = -f.x/length(f)*cos(t)+ f.y/length(f)*abs(sin(t)) ;
                        g*=1.0-length(f)/RADIUS/128.9;
                        g = pow(g, 45.*DECAY);
                        g-=(SPOT-length(gl_FragCoord.xy-enem))*float((length(gl_FragCoord.xy-enem)<SPOT));
                        g+=point(vec3(cen, 0.), 4.);
                        float map = contactOnLocation(vec2(f.x, f.y));//float(perlin(vec2(gl_FragCoord.x, gl_FragCoord.y+time*TRAVELSPEED))>(1.-OBSTACLESIZE));
                        g-=map;
                        
                    }
                    else
                    {
                        r=.1; g=.1; b=.1;
                    }
                    vec4 outColor = vec4(r, g, b, 1.0);
                    float grid, grid2;
                    if(GRIDON && gl_FragCoord.y > cen.y)	/** the grid  */
                    {
                        grid = circleA(vec3(cen, 0.), RADIUS+1., 1.35);
                        grid+=circleA(vec3(cen, 0.), RADIUS/2., .31);
                        grid+=circleA(vec3(cen, 0.), RADIUS/4., .21);
                        grid+=circleA(vec3(cen, 0.), RADIUS*3./4., .21);
                        for(int i=0; i<8; i++)
                        {
                            float phase = 2.*PI/8.*float(i);
                            vec3 p0 = vec3(cen, 0.)+RADIUS/4.*vec3(cos(phase), sin(phase), 0.);
                            vec3 p1 = vec3(cen, 0.)+RADIUS*vec3(cos(phase), sin(phase), 0.);
                            grid2+=segment(p0, p1, 3.75, false);
                        /**** removed peripherial grid ****/
                            p0 = vec3(cen, 0.)+RADIUS/1.25*vec3(cos(phase+PI/8.), sin(phase+PI/8.), 0.);
                            p1 = vec3(cen, 0.)+RADIUS*vec3(cos(phase+PI/8.), sin(phase+PI/8.), 0.);		
                            grid2+=segment(p0, p1, 3.75, false);                        
                        }                    
                    }
                    outColor = vec4(mix(0.7 * grid, grid2, 0.15), g, 0., 1.0);
                    gl_FragColor = outColor;
                }
            `;
    
            var vertShader = gl.createShader(gl.VERTEX_SHADER);
            gl.shaderSource(vertShader, vertCode);
            gl.compileShader(vertShader);
    
            var fragShader = gl.createShader(gl.FRAGMENT_SHADER);
            gl.shaderSource(fragShader, fragCode);
            gl.compileShader(fragShader);
    
            var shaderProgram = gl.createProgram();
            gl.attachShader(shaderProgram, vertShader);
            gl.attachShader(shaderProgram, fragShader);
            gl.linkProgram(shaderProgram);
    
            /* ====== Associating attributes to vertex shader =====*/
            var time = gl.getUniformLocation(shaderProgram, "time");
            var mouse = gl.getUniformLocation(shaderProgram, "mouse");
            var resolution = gl.getUniformLocation(shaderProgram, "resolution");
            var contactPositions = gl.getUniformLocation(shaderProgram, "contactPositions");
            gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);
            //gl.bindBuffer(gl.ARRAY_BUFFER, contacts_buffer);
            var position = gl.getAttribLocation(shaderProgram, "position");
            gl.vertexAttribPointer(position, 3, gl.FLOAT, false,0,0);
    
            // Position
            gl.enableVertexAttribArray(position);
            gl.useProgram(shaderProgram);
    
    
            /*================= Drawing ===========================*/
            var time_old = 0;
    
            var animate = function(tim,pr) {
                var dt = tim-time_old;
                time_old = tim;
        
                gl.enable(gl.DEPTH_TEST);
                gl.depthFunc(gl.LEQUAL);
                gl.clearColor(0.5, 0.5, 0.5, 0.9);
                gl.clearDepth(1.0);
        
                gl.viewport(0.0, 0.0, canvas.width, canvas.height);
                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
                gl.uniform1f( time, tim / 10000 );
                gl.uniform2f( mouse, 13, 64 );
                gl.uniform2f( resolution, canvas.width, canvas.height );
                var contacts =  [-10.0,5.0,1.0,1.0,-1.]; 
                /*  4 values per contact:
                        x (left or right for the radar)
                        y (how far away from radar when radar is looking straight out)
                        z (altitude which is not used yet...)
                        q (wingspan which changes how big the contact is showed on the radar)
                    Make sure to end the array with a "-1" for early exit loop.
                */
                gl.uniform1fv(contactPositions, new Float32Array(contacts));
                
                
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, index_buffer);
                gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT, 0);
        
                window.requestAnimationFrame(animate);
            }
            animate(0, shaderProgram);
            function resizeCanvas(e) {
                
                canvas.width = document.documentElement.clientWidth;
                canvas.height = document.documentElement.clientHeight;
            }
            window.addEventListener("resize", resizeCanvas, false);
        </script>
   </body>
</html>